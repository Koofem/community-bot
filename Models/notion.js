const { Client } = require('@notionhq/client');

class Notion {
	constructor() {}
	client;

	async init() {
		return new Promise((resolve) => {
			this.client =  new Client({ auth: process.env.NOTION_TOKEN });
			return resolve();
		}).then(async()=> {
			console.log('Notion –ø–æ–¥–∫–ª—é—á–µ–Ω');
		})
	}

	async createQuestionNotion(question, index, userBD) {
		const title = question.slice(0, 15);
		const userWhoAsked = `${userBD.first_name} (@${userBD.username})`;
		const response = await this.client.pages.create({
			parent: {
				database_id: process.env.NOTION_QUESTION_DATABASE_TOKEN
			},
			icon: {
				type: "emoji",
				emoji: "‚ùì"
			},
			properties: {
				title: {
					title: [
						{
							text: {
								content: title + '...',
							},
						},
					],
				},
				"–°—Ç–∞—Ç—É—Å": {
					select: {
					name: "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
					}
				},
				"–ö—Ç–æ –∑–∞–¥–∞–ª": {
					rich_text: [{
						text: {
							content: userWhoAsked
						}
					}],
				},
				"–ò–Ω–¥–µ–∫—Å": {
					rich_text: [{
						text: {
							content: index.toString()
						}
					}],
				},
			},
			children: [
				{
					object: 'block',
					type: 'paragraph',
					paragraph: {
					text:[
						{
							type: 'text',
							text: {
								content: question
							}
						}
					]}
				}
			]
		})

		return response.id;
	}
	async updateQuestionNotion(notionID, answer) {
	await this.client.pages.update({
			page_id: notionID,
			properties: {
				"–°—Ç–∞—Ç—É—Å": {
					select: {
						name: "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
					}
				},
			},
		});
	await this.client.blocks.children.append({
		block_id: notionID,
		children: [
			{
				object: 'block',
				type: 'paragraph',
				paragraph: {
					text: [
						{type: 'text',
						text: {
							content: `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${answer}`
						}}
					]
				}
			}
		]
	})
	}

	async createPostNotion(post, userBD, index, type) {
		const title = post.slice(0, 15);
		const channel = type === 'private' ? '–ö–∞–Ω–∞–ª X5 Tech Community' : '–ö–∞–Ω–∞–ª X5 Tech News';
		const userWhoAsked = `${userBD.first_name} (@${userBD.username})`;
		const response = await this.client.pages.create({
			parent: {
				database_id: process.env.NOTION_POSTS_DATABASE_TOKEN
			},
			icon: {
				type: "emoji",
				emoji: "üì∞"
			},
			properties: {
				title: {
					title: [
						{
							text: {
								content: title + '...',
							},
						},
					],
				},
				"–°—Ç–∞—Ç—É—Å": {
					select: {
						name: "–û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
					}
				},
				"–ê–≤—Ç–æ—Ä": {
					rich_text: [{
						text: {
							content: userWhoAsked
						}
					}],
				},
				"–ò–Ω–¥–µ–∫—Å": {
					rich_text: [{
						text: {
							content: index.toString()
						}
					}],
				},
				"–ö–∞–Ω–∞–ª": {
					select: {
						name: `${channel}`
					}
				},
			},
			children: [
				{
					object: 'block',
					type: 'paragraph',
					paragraph: {
						text:[
							{
								type: 'text',
								text: {
									content: post
								}
							}
						]}
				}
			]
		})

		return response.id;
	}

	async createSpeechNotion(speech, userBD, index) {
		const title = speech.slice(0, 15);
		const userWhoAsked = `${userBD.first_name} (@${userBD.username})`;
		const response = await this.client.pages.create({
			parent: {
				database_id: process.env.NOTION_SPEECH_DATABASE_TOKEN
			},
			icon: {
				type: "emoji",
				emoji: "üéô"
			},
			properties: {
				title: {
					title: [
						{
							text: {
								content: title + '...',
							},
						},
					],
				},
				"–°—Ç–∞—Ç—É—Å": {
					select: {
						name: "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
					}
				},
				"–í—ã—Å—Ç—É–ø–∞—é—â–∏–π": {
					rich_text: [{
						text: {
							content: userWhoAsked
						}
					}],
				},
				"–ò–Ω–¥–µ–∫—Å": {
					rich_text: [{
						text: {
							content: index.toString()
						}
					}],
				},
			},
			children: [
				{
					object: 'block',
					type: 'paragraph',
					paragraph: {
						text:[
							{
								type: 'text',
								text: {
									content: speech
								}
							}
						]}
				}
			]
		})

		return response.id;
	}

	async createIdeasNotion(idea, userBD, index) {
		const title = idea.slice(0, 15);
		const userWhoAsked = `${userBD.first_name} (@${userBD.username})`;
		const response = await this.client.pages.create({
			parent: {
				database_id: process.env.NOTION_IDEA_DATABASE_TOKEN
			},
			icon: {
				type: "emoji",
				emoji: "üéô"
			},
			properties: {
				title: {
					title: [
						{
							text: {
								content: title + '...',
							},
						},
					],
				},
				"–°—Ç–∞—Ç—É—Å": {
					select: {
						name: "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
					}
				},
				"–ê–≤—Ç–æ—Ä": {
					rich_text: [{
						text: {
							content: userWhoAsked
						}
					}],
				},
				"–ò–Ω–¥–µ–∫—Å": {
					rich_text: [{
						text: {
							content: index.toString()
						}
					}],
				},
			},
			children: [
				{
					object: 'block',
					type: 'paragraph',
					paragraph: {
						text:[
							{
								type: 'text',
								text: {
									content: idea
								}
							}
						]}
				}
			]
		})

		return response.id;
	}
}

const notionApi = new Notion();
module.exports = notionApi;


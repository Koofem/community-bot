const lodash = require('../lodash');
const messages = require('Constants/message');
const actions = require('Constants/actions');
const {
	findUserName,
	resetLastAction,
	saveOrUpdateUser,
	checkIsAdmin,
	findAllUsers,
	setActionToUser,
	getAllUsers,
	resetUserAction,
	findUser,
	checkCurrentAction,
	getPhotoID,
	getAllQuestions,
	writeNewQuestion,
	makeNotionQuestionPage,
	getAllIdeas,
	writeNewIdea,
	makeNotionIdeaPage,
	getAllSpeech,
	writeNewSpeech,
	makeNotionSpeechPage,
	getAllPosts,
	writeNewPost,
	makeNotionPostPage,
	findQuestion,
	findUserById,
	setActionWithPropertyToUser,
	updateQuestionAnswer,
	updateQuestionNotion,
} = require('Helpers/helpers')

const MESSAGE_LIMIT = 4096;

class MessagesHandler {
	async restartAndStartCommandHandler(ctx) {
		await saveOrUpdateUser(ctx.from)
		await resetLastAction(ctx.from);
		await this.menuSelection(ctx);
	}

	async menuSelection(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			return this.showMenuSelection(ctx)
		} else {
			return this.showRegularMenu(ctx);
		}
	}

	async showMenuSelection(ctx) {
		const userName = await findUserName(ctx.from);
		const msg = `–û –≤–µ–ª–∏–∫–∏–π –∏ –≤—Å–µ–º–æ–≥—É—â–∏–π(–∞—è) ${userName}, –∫–∞–∫ —è –º–æ–≥—É —É—Å–ª—É–∂–∏—Ç—å —Ç–µ–±–µ?`
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			reply_markup: {
				keyboard: [
					[messages.ADMINMENU, messages.REGULARMENU],
				],
				resize_keyboard: true,
			},
		})
	}


	async getUsersHandler(ctx) {
		const usersArr = await findAllUsers();
		const timeout = setTimeout(() =>  {
			ctx.telegram.sendMessage(ctx.chat.id, '–î—É–º–∞—é, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ....');
		}, 500)

		const promises = usersArr.map(user => {
			return new Promise((res)=> {
				return res(ctx.telegram.sendMessage(ctx.chat.id, `–ò–º—è: ${user.first_name} \n–§–∞–º–∏–ª–∏—è: ${user.last_name} \n–ù–∏–∫: @${user.username}\n–ê–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Çü§î: ${user.admin ? '–ê–¥–º–∏–Ω': '–Ω–µ –∞–¥–º–∏–Ω'}`));
			})
		})
		return Promise.all(promises).then(()=> {
			clearInterval(timeout);

		});
	}

	async massiveMessageHandler(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await setActionToUser(ctx.from, actions.MASSIVEMESSAGE)
			await ctx.telegram.sendMessage(ctx.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç, –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏!:)', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		} else {
			const msg = '—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é!:)'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async newsletterMessageHandler(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await ctx.telegram.sendMessage(ctx.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: messages.NEWSLETTERTOPRIVATECHANNEL,
								callback_data: actions.NEWSLETTERTOPRIVATECHANNEL
							},
							{
								text: messages.NEWSLETTERTOEXTERNALCHANNEL,
								callback_data: actions.NEWSLETTERTOEXTERNALCHANNEL
							},
							{
								text: messages.NEWSLETTERTOALL,
								callback_data: actions.NEWSLETTERALL
							},
							]
					],
				},
				resize_keyboard: true,
			})
		} else {
			const msg = '—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é!:)'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async newsLetterToAllHandler(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await setActionToUser(ctx.from, actions.NEWSLETTERALL);
			await ctx.telegram.sendMessage(ctx.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏!:)', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		}
	}

	async newsLetterToExternalChannel(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await setActionToUser(ctx.from, actions.NEWSLETTERTOEXTERNALCHANNEL);
			await ctx.telegram.sendMessage(ctx.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª X5 Tech News, –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏!:)', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		}
	}

	async newsLetterToPrivateChannel(ctx) {
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await setActionToUser(ctx.from, actions.NEWSLETTERTOPRIVATECHANNEL);
			await ctx.telegram.sendMessage(ctx.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª X5 Tech Community, –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏!:)', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		}
	}

	async answerMassiveMessageHandler(ctx, user) {
		const usersArr = await getAllUsers();
		const massiveMessage = ctx.update.message.text;
		await resetUserAction(user)
		const timeout = setTimeout(()=> {
			ctx.telegram.sendMessage(ctx.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
		}, 500)

		const promises = usersArr.map((user) => {
			return new Promise((resolve) => {
				ctx.telegram.sendMessage(user.id, massiveMessage).then(()=> {
					return resolve();
				})
			})
		})

		Promise.all(promises).then(() => {
			clearInterval(timeout)
			const msg = '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å, –¥–∞–∂–µ —Ç–µ–±–µ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!'
			return this.showAdminMenu(ctx, msg);
		})
	}

	async getNotion(ctx) {
		const notion = 'https://www.notion.so/foodtech-x5/15a362b1538f4b53895e19721911fa41'
		const msg=`–ó–∞–±–∏—Ä–∞–π\n${notion}`
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {parse_mode: 'HTML'})

	}

	async showAdminMenu(ctx, extraMsg) {
		const msg = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏';
		const sendMessage = extraMsg ? extraMsg : msg
		const user = await findUser(ctx.from);
		if (checkIsAdmin(user)) {
			await ctx.telegram.sendMessage(ctx.chat.id, sendMessage, {
				reply_markup: {
					keyboard: [
						[messages.MASSIVEMESSAGE, messages.GETALLUSERS],
						[messages.GETNOTIONDATABASE, messages.NEWSLETTER],
						[messages.SELECTQUESTION],
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		} else {
			const msg = '—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é!:)'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async showRegularMenu(ctx, extraMsg) {
		const userName = await findUserName(ctx.from)
		const msg = "—á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?";
		const sendMessage = extraMsg ? `${userName}, ${extraMsg}` : `${userName}, ${msg}`
		await ctx.telegram.sendMessage(ctx.chat.id, sendMessage, {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})
	}

	async timeTableHandler(ctx) {
		//TODO->–ü–†–û–í–ï–†–ò–¢–¨ –°–°–´–õ–ö–£
		const link = '<a href="https://foodtech-x5.notion.site/1cbcc45d54f54514ba5dcf7289314632">—Å—Å—ã–ª–∫–µ</a>'
		await ctx.telegram.sendMessage(ctx.chat.id, '–°—É–ø–µ—Ä, –∑–∞ –Ω–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –ø–æ '+ link, {
			parse_mode:'HTML'
		})
	}

	async informationHandler(ctx) {
		const techNewsLink = '<a href="https://t.me/joinchat/TzL23fprszHePDo5">–ö–∞–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º X5 Tech News</a>'
		const communityLink = '<a href="https://t.me/joinchat/S87gOoavoRmhet1O">–ö–∞–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º X5 Tech Community</a>'
		const Olya = '<a href="https://t.me/opastuk">–û–ª—è –ü–∞—Å—Ç—É—Ö–æ–≤–∞</a>'
		const Nikita = '<a href="https://t.me/NickPanormov">–ù–∏–∫–∏—Ç–∞ –ü–∞–Ω–æ—Ä–º–æ–≤</a>'
		const Tolya = '<a href="https://t.me/ababin71517">–¢–æ–ª—è –ë–∞–±–∏–Ω</a>'
		const ZOOM = '<a href="https://us02web.zoom.us/j/5887041256">–ó–î–ï–°–¨</a>'
		const message = "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –°–µ–π—á–∞—Å –Ω–∞—à–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: \n\n" + techNewsLink + ", –∫—É–¥–∞ –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞.\n\n" +
			communityLink + ", –∫—É–¥–∞ –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤—Å—è–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏. –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏–ª —Å–ª–æ–∂–Ω—É—é —Ä–∞–±–æ—á—É—é –∑–∞–¥–∞—á—É, –ø—Ä–∏–¥—É–º–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ –∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–µ, —Ç–æ —Ç–µ–±–µ —Å—é–¥–∞!\n\n" +
			'<b>–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 14:00</b> –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è ' + `<b>${ZOOM}</b>` + ' ,–æ–±—â–∞–µ–º—Å—è, –≤–æ—Ä–∫—à–æ–ø–∏–º—Å—è –∏ –≤–µ—Å–µ–ª–∏–º—Å—è\n\n' + 'https://us02web.zoom.us/j/5887041256 | <b>–ë–æ–ª—Ç–∞–ª–∫–∞ (935030 –∫–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)</b>\n\n' + '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è ' + Olya + ', –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –µ–π –Ω–∞–ø—Ä—è–º—É—é, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ë–æ–ª—å—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º—å—é–Ω–∏—Ç–∏ —Ç–∞–∫ –∂–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç ' + Nikita + ', –∏ '+ Tolya +', –æ–Ω–∏ –≤–µ–¥—É—Ç —Å–≤–æ–∏ —Ä—É–±—Ä–∏–∫–∏ –∏ –¥–µ–ª–∞—é—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∫—Ä—É—Ç–æ–≥–æ –¥–ª—è –Ω–∞—Å.\n\n' +
			'(https://www.notion.so/11129fe6272a4e3bb3353c7daeb2854b) –ë–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–∞ –≤–æ—Ç —Ç—É—Ç –∏ –≤ –∑–∞–∫—Ä–µ–ø–µ –ø–∞–±–ª–∏–∫–∞ –∫–æ–æ–º—å—é–Ω–∏—Ç–∏. –û–∑–Ω–∞–∫–æ–º—å—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!\n\n' + '–ù–æ —Å–µ—Ä–¥—Ü–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ - —ç—Ç–æ —Ç—ã! –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å - –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã. –î–∞–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏, —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —É—á–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! –ó–¥–µ—Å—å –≤—Å–µ—Ö –ª—é–±—è—Ç ‚ù§Ô∏è'

		await ctx.telegram.sendMessage(ctx.chat.id, message, {
			parse_mode:'HTML'
		})
	}

	async askQuestionHandler(ctx) {
		const userName = await findUserName(ctx.from);
		const msg = userName ? `${userName}, —Å–ª—É—à–∞—é —Ç–µ–±—è! \n–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!`: '–°–ª—É—à–∞—é —Ç–µ–±—è!\n –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!';
		await setActionToUser(ctx.from, actions.ASKQUESTION);

		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async speechHandler(ctx) {
		const userName = await findUserName(ctx.from);
		const msg = userName ? `${userName}, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –í —Ä–∞–º–∫–∞—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∫–∞–∫ –∏ –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã (15-40 –º–∏–Ω—É—Ç), —Ç–∞–∫ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ X5 FoodTech. –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–∞—Ç—É!`:
			'–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –í —Ä–∞–º–∫–∞—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∫–∞–∫ –∏ –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã (15-40 –º–∏–Ω—É—Ç), —Ç–∞–∫ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ X5 FoodTech. –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–∞—Ç—É!';
		await setActionToUser(ctx.from, actions.IWANTTOSPEAK);
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async giveIdeaHandler(ctx) {
		const userName = await findUserName(ctx.from);
		const msg = userName ? `${userName}, –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ú—ã –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –û–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–Ω–µ –≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ`:
			'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ú—ã –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –û–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–Ω–µ –≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ';
		await setActionToUser(ctx.from, actions.GIVEIDEA);
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async suggestExternalPostHandler(ctx) {
		const msg = "–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å—Å—ã–ª–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å, –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –∏—Ö –ø—Ä–∏–Ω—è—Ç—å ‚òπÔ∏è"
		await setActionToUser(ctx.from, actions.SUGGESTEXTERNALPOST);
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}

	async suggestPrivatePostHandler(ctx) {
		const msg = "–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å—Å—ã–ª–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å, –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –∏—Ö –ø—Ä–∏–Ω—è—Ç—å ‚òπÔ∏è"
		await setActionToUser(ctx.from, actions.SUGGESTPRIVATEPOST);

		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}

	async suggestNewsHandler(ctx) {
		const userName = await findUserName(ctx.from);
		const msg = userName ? `${userName}, –æ—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å?`:
			'–æ—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å?';

		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.EXTERNALCHANNEL, messages.PRIVATECHANNEL],
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}

	async simpleMessageHandler(ctx) {
		const user = await findUser(ctx.from)
		if (checkCurrentAction(user)) {
				switch (user.current_action) {
					case actions.ASKQUESTION:
						return this.answerQuestionHandler(ctx, user);
					case actions.GIVEIDEA:
						return this.answerIdeaHandler(ctx, user);
					case actions.IWANTTOSPEAK:
						return this.answerSpeechHandler(ctx, user);
					case actions.SUGGESTEXTERNALPOST:
						return this.answerSuggestExternalPostHandler(ctx, user);
					case actions.SUGGESTPRIVATEPOST:
						return this.answerSuggestPrivatePostHandler(ctx, user);
					case actions.MASSIVEMESSAGE:
						return this.answerMassiveMessageHandler(ctx, user);
					case actions.NEWSLETTERALL:
						return this.answerNewsletterAllHandler(ctx,user)
					case actions.NEWSLETTERTOEXTERNALCHANNEL:
						return this.answerNewsletterExternalChannel(ctx,user)
					case actions.NEWSLETTERTOPRIVATECHANNEL: {
						return this.answerNewsletterPrivateChannel(ctx,user)
					}
					case actions.SELECTQUESTION:
						return this.selectedQuestionHandler(ctx, user)
					case actions.ANSEWERINGQEUSTION:
						return this.answeringQuestionHandler(ctx, user)
				}
		} else {
			return await this.sendSimpleMessage(ctx, await findUserName(user));
		}
	}

	async answerNewsletterAllHandler(ctx, user) {
		const massiveMessage = ctx.update.message.text;
		await resetUserAction(user)
		const timeout = setTimeout(()=> {
			ctx.telegram.sendMessage(ctx.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
		}, 500)

		const channels = [process.env.PRIVATECHANNEL, process.env.EXTERNALCHANNEL]

		const promises = channels.map((channel) => {
			return new Promise((resolve) => {
				ctx.telegram.sendMessage(channel, massiveMessage).then(()=> {
					return resolve();
				})
			})
		})

		Promise.all(promises).then(() => {
			clearInterval(timeout)
			const msg = '–ì–æ—Ç–æ–≤–æ!'
			return this.showAdminMenu(ctx, msg);
		})
	}

	async answerNewsletterPrivateChannel(ctx, user) {
		const massiveMessage = ctx.update.message.text;
		await resetUserAction(user)
		const timeout = setTimeout(()=> {
			ctx.telegram.sendMessage(ctx.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
		}, 500)

		const channels = [process.env.PRIVATECHANNEL]

		const promises = channels.map((channel) => {
			return new Promise((resolve) => {
				ctx.telegram.sendMessage(channel, massiveMessage).then(()=> {
					return resolve();
				})
			})
		})

		Promise.all(promises).then(() => {
			clearInterval(timeout)
			const msg = '–ì–æ—Ç–æ–≤–æ!'
			return this.showAdminMenu(ctx, msg);
		})
	}

	async answerNewsletterExternalChannel(ctx, user) {
		const massiveMessage = ctx.update.message.text;
		await resetUserAction(user)
		const timeout = setTimeout(()=> {
			ctx.telegram.sendMessage(ctx.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
		}, 500)

		const channels = [process.env.EXTERNALCHANNEL]

		const promises = channels.map((channel) => {
			return new Promise((resolve) => {
				ctx.telegram.sendMessage(channel, massiveMessage).then(()=> {
					return resolve();
				})
			})
		})

		Promise.all(promises).then(() => {
			clearInterval(timeout)
			const msg = '–ì–æ—Ç–æ–≤–æ!'
			return this.showAdminMenu(ctx, msg);
		})
	}

	async photoMessageHandler(ctx) {
		const timeout = setTimeout(()=> {
			ctx.telegram.sendMessage(ctx.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è');
		}, 500)
		let photoID = null
		await getPhotoID(ctx).then((id) => {
			photoID = id
		}).catch((e)=> {
			return ctx.telegram.sendMessage(ctx.chat.id, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—à–∏–±–∫–∞: ${e}`)
		})
		const user = await findUser(ctx.from)
		const usersArr = await getAllUsers();
		if (checkIsAdmin(user) && lodash.get(user, 'current_action', false ) === actions.MASSIVEMESSAGE) {
			await resetLastAction(user);
			const massiveMessage = ctx.update.message.caption ? ctx.update.message.caption : '';
			const promises = usersArr.map((user) => {
				return new Promise((resolve)=> {
					 return ctx.telegram.sendPhoto(user.id, photoID, {
						caption: massiveMessage,
						disable_notification: true,
					}).then(()=> {
							return resolve();

					 })
				})
			});
			await Promise.all(promises).then(() => {
				clearInterval(timeout)
				const msg = '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å, –¥–∞–∂–µ —Ç–µ–±–µ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!'
				return this.showAdminMenu(ctx, msg);
			})
		} else if (checkIsAdmin(user) && lodash.get(user, 'current_action', false ) === actions.NEWSLETTERALL) {
			await resetLastAction(user);
			const channels = [process.env.PRIVATECHANNEL, process.env.EXTERNALCHANNEL]
			const massiveMessage = ctx.update.message.caption ? ctx.update.message.caption : '';
			const promises = channels.map((channel) => {
				return new Promise((resolve)=> {
					return ctx.telegram.sendPhoto(channel, photoID, {
						caption: massiveMessage,
						disable_notification: true,
					}).then(()=> {
						return resolve();

					})
				})
			});
			await Promise.all(promises).then(() => {
				clearInterval(timeout)
				const msg = '–ì–æ—Ç–æ–≤–æ!'
				return this.showAdminMenu(ctx, msg);
			})

		} else if (checkIsAdmin(user) && lodash.get(user, 'current_action', false ) === actions.NEWSLETTERTOEXTERNALCHANNEL) {
			await resetLastAction(user);
			const channels = [process.env.EXTERNALCHANNEL]
			const massiveMessage = ctx.update.message.caption ? ctx.update.message.caption : '';
			const promises = channels.map((channel) => {
				return new Promise((resolve) => {
					return ctx.telegram.sendPhoto(channel, photoID, {
						caption: massiveMessage,
						disable_notification: true,
					}).then(() => {
						return resolve();

					})
				})
			});
			await Promise.all(promises).then(() => {
				clearInterval(timeout)
				const msg = '–ì–æ—Ç–æ–≤–æ!'
				return this.showAdminMenu(ctx, msg);
			})

		} else if (checkIsAdmin(user) && lodash.get(user, 'current_action', false ) === actions.NEWSLETTERTOPRIVATECHANNEL) {
			await resetLastAction(user);
			const channels = [process.env.PRIVATECHANNEL]
			const massiveMessage = ctx.update.message.caption ? ctx.update.message.caption : '';
			const promises = channels.map((channel) => {
				return new Promise((resolve)=> {
					return ctx.telegram.sendPhoto(channel, photoID, {
						caption: massiveMessage,
						disable_notification: true,
					}).then(()=> {
						return resolve();

					})
				})
			});
			await Promise.all(promises).then(() => {
				clearInterval(timeout)
				const msg = '–ì–æ—Ç–æ–≤–æ!'
				return this.showAdminMenu(ctx, msg);
			})

		}		else {
			const msg = '–∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é üôà'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async answerSuggestExternalPostHandler(ctx, user) {
		const posts = await getAllPosts();
		const index = posts.length + 1;
		const receivedExternalPost = ctx.update.message.text;
		const insertExternalPost = {
			post: receivedExternalPost,
			user_id: user.id,
			type: 'external',
			date: new Date().toISOString(),
			index: index
		}
		await writeNewPost(insertExternalPost)

		await resetLastAction(user)

		await ctx.telegram.sendMessage(ctx.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})

		const pageID = await makeNotionPostPage(index,receivedExternalPost, user, 'public')
		await ctx.telegram.sendMessage(187860941, `–í–µ–ª–∏–∫–∞—è –û–ª—è, –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–µ–≥–æ: \n\nhttps://www.notion.so/foodtech-x5/${pageID.replace(/-/g, '')}`)
	}

	async answerSuggestPrivatePostHandler(ctx, user) {
		const posts = await getAllPosts();
		const index = posts.length + 1;
		const receivedPrivatePost = ctx.update.message.text;
		const insertPrivatePost = {
			post: receivedPrivatePost,
			user_id: user.id,
			type: 'private',
			date: new Date().toISOString(),
			index: index
		}

		await writeNewPost(insertPrivatePost)

		await resetLastAction(user)

		await ctx.telegram.sendMessage(ctx.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})
		const pageID = await makeNotionPostPage(index,receivedPrivatePost, user, 'private')
		await ctx.telegram.sendMessage(187860941, `–í–µ–ª–∏–∫–∞—è –û–ª—è, –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–µ–≥–æ: \n\nhttps://www.notion.so/foodtech-x5/${pageID.replace(/-/g, '')}`)
	}

	async answerSpeechHandler(ctx, user) {
		const posts = await getAllSpeech();
		const index = posts.length + 1;
		const receivedSpeech = ctx.update.message.text;
		const insertSpeech = {
			speech: receivedSpeech,
			user_id: user.id,
			date: new Date().toISOString(),
			index: index
		}
		await writeNewSpeech(insertSpeech)

		await resetLastAction(user)

		const theNote = '<a href="https://www.notion.so/foodtech-x5/8098da36c0474833ad5018c879b754b9">–ø–∞–º—è—Ç–∫—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ—Ä–∫—à–æ–ø–æ–≤</a>'

		 await ctx.telegram.sendMessage(ctx.chat.id, `–ü—Ä–∏–Ω—è—Ç–æ! –î–µ—Ä–∂–∏ –Ω–∞—à—É ${theNote} üòÄ`, {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
			parse_mode:'HTML'
		})
		const pageID = await makeNotionSpeechPage(index, receivedSpeech, user)
		await ctx.telegram.sendMessage(187860941, `–í–µ–ª–∏–∫–∞—è –û–ª—è, –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–µ–≥–æ: \n\nhttps://www.notion.so/foodtech-x5/${pageID.replace(/-/g, '')}`)
	}

	async sendSimpleMessage(ctx, userName) {
		const unidentifiedMessage = userName ? `–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å ${userName} üò≠ `: '–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å üò≠';
		await ctx.telegram.sendMessage(ctx.chat.id, unidentifiedMessage)
	}

	async selectedQuestionHandler(ctx, user) {
		const index = ctx.update.message.text
		const question = await findQuestion(index);
		if (question && !question.answered) {
			const userWhoAsked = await findUserById(question.user_id)
			await setActionWithPropertyToUser(user, actions.QUESTIONSELECTED, {questionIndex: index})
			const message = `–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å: \n–ê–≤—Ç–æ—Ä: ${userWhoAsked.first_name} (@${userWhoAsked.username})\n–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${question.answered ? '–î–∞' : '–ù–µ—Ç'}\n–í–æ–ø—Ä–æ—Å: ${question.question}. \n–ë—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å?`
			await ctx.telegram.sendMessage(ctx.chat.id, message, {
				reply_markup: {
					keyboard: [
						[messages.SAYYES, messages.SAYNO],
						[messages.BACK]
					],
					resize_keyboard: true,
				},
				parse_mode: 'HTML'
			})
		} else if(question && question.answered) {
			const userWhoAsked = await findUser(question.user_id)
			const message = `–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å: \n–ê–≤—Ç–æ—Ä: ${userWhoAsked.first_name} (@${userWhoAsked.username})\n–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${question.answered ? '–î–∞' : '–ù–µ—Ç'}\n–í–æ–ø—Ä–æ—Å: ${question.question}. \n–û—Ç–≤–µ—Ç: ${question.answer}`
			await ctx.telegram.sendMessage(ctx.chat.id, message);

		} else {
			await ctx.telegram.sendMessage(ctx.chat.id, '–ù–µ –Ω–∞—à–µ–ª –≤–æ–ø—Ä–æ—Å')
			await this.menuSelection(ctx,user);
		}
	}

	async selectQuestionHandler(ctx) {
		const user = await findUser(ctx.from)
		if (checkIsAdmin(user)) {
			await setActionToUser(user, actions.SELECTQUESTION)
			await ctx.telegram.sendMessage(ctx.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–π', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		}
	}

	async answeringQuestionHandler(ctx, user) {
		const answer = ctx.update.message.text
		const question = await findQuestion(user.questionIndex)
		const notionPageID = question.notionPageID;
		const message = `–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞–¥–∞–≤–∞–ª(–∞) –≤–æ–ø—Ä–æ—Å: \n${question.question}\n–û—Ç–≤–µ—á–∞—é:\n${answer}`

		await updateQuestionAnswer(question.index, answer)
		await updateQuestionNotion(notionPageID, answer)

		await ctx.telegram.sendMessage(question.user_id, message, {parse_mode: 'HTML'});
		await resetLastAction(user);
		await ctx.telegram.sendMessage(ctx.chat.id, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
		await this.showAdminMenu(ctx);
	}

	async sayYesHandler(ctx) {
		const user = await findUser(ctx.from);
		const index = user.questionIndex
		if (user.current_action === actions.QUESTIONSELECTED) {
			await setActionWithPropertyToUser(user, actions.ANSEWERINGQEUSTION, {questionIndex: index})
			await ctx.telegram.sendMessage(ctx.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –∑–∞–¥–∞–ª.', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
				parse_mode: 'HTML'
			})
		}
	}

	async sayNoHandler(ctx) {
		const user = await findUser(ctx.from)
		await ctx.telegram.sendMessage(ctx.chat.id, '–ù—É –∫–∞–∫ –∑–Ω–∞–µ—à—å')
		await resetLastAction(user);
		await this.showAdminMenu(ctx);
	}

	async answerQuestionHandler(ctx, user) {
		const askedQuestion = ctx.update.message.text;
		const questions = await getAllQuestions();
		const index = questions.length + 1;
		const insertQuestion = {
			question: askedQuestion,
			user_id: user.id,
			date: new Date().toISOString(),
			index: index,
			answered: false
		}
		await writeNewQuestion(insertQuestion)

		await resetLastAction(user)

		 await ctx.telegram.sendMessage(ctx.chat.id, `–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä: ${index}. –û—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üí™`,{
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})

		const pageID = await makeNotionQuestionPage(index, askedQuestion, user);
		await ctx.telegram.sendMessage(187860941, `–í–µ–ª–∏–∫–∞—è –û–ª—è, –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–µ–≥–æ: \n\nhttps://www.notion.so/foodtech-x5/${pageID.replace(/-/g, '')}`)
	}

	async answerIdeaHandler(ctx, user) {
		const ideas = await getAllIdeas();
		const index = ideas.length + 1;
		const idea = ctx.update.message.text;
		const insertIdea = {
			idea: idea,
			user_id: user.id,
			date: new Date().toISOString(),
			index: index
		}
		await writeNewIdea(insertIdea)

		await resetLastAction(user)

		await ctx.telegram.sendMessage(ctx.chat.id, '–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–µ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ –∏–¥–µ–∏ –∏ –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!üí™', {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})

		const pageID = await makeNotionIdeaPage(index, idea, user);
		await ctx.telegram.sendMessage(187860941, `–í–µ–ª–∏–∫–∞—è –û–ª—è, –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤–∑–æ—Ä –Ω–∞ –Ω–µ–≥–æ: \n\nhttps://www.notion.so/foodtech-x5/${pageID.replace(/-/g, '')}`)
	}

}

const msgHandler = new MessagesHandler();
module.exports = msgHandler;

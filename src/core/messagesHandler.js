const Mongodb = require('./mongodb');
const lodash = require('../../lodash');
const messages = require('../../message');
const action = require('../../actions');
const request = require('request')

class MessagesHandler {
	constructor() {
	}

	async initMongodb() {
		await Mongodb.init();
	}

	async saveOrUpdateUser(user) {
		const userBD = await this.findUser(user);
		if (userBD) {
			const isUsersEqual = this._compare(user, userBD);
			if (!isUsersEqual){
				return await Mongodb.userBD.updateOne({id: userBD.id}, {
					$set: {
						first_name: user.first_name,
						username: user.username,
						last_name: user.last_name? user.last_name : ''
					}
				})
			}
		} else {
			const insertUser = {
				id: user.id,
				first_name: user.first_name? user.first_name : '',
				username: user.username,
				last_name: user.last_name? user.last_name : ''
			}

			user.last_name ? insertUser.last_name = user.last_name : '';

			return await Mongodb.userBD.insertOne(insertUser)
		}

	}

	_compare(user, userBD) {
		return (user.first_name === userBD.first_name && user.last_name === userBD.last_name && user.username === userBD.username)
	}

	async findUserName(user) {
		const foundUser = await this.findUser(user)
		return foundUser.first_name;
	}

	async findUser(user) {
		return await Mongodb.userBD.findOne({id: user.id});
	}

	async restartAndStartCommandHandler(ctx) {
		await this.saveOrUpdateUser(ctx.from)
		const user = await this.findUser(ctx.from)
		await this.resetLastAction(user);
		await this.menuSelection(ctx,user);
	}

	async menuSelection(ctx, user) {
		if (lodash.has(user, 'admin')) {
			return this.showMenuSelection(ctx)
		} else {
			return this.showRegularMenu(ctx);
		}
	}

	async showMenuSelection(ctx) {
		const userName = await this.findUserName(ctx.from);
		const msg = `–û –≤–µ–ª–∏–∫–∏–π –∏ –≤—Å–µ–º–æ–≥—É—â–∏–π(–∞—è) ${userName}, –∫–∞–∫ —è –º–æ–≥—É —É—Å–ª—É–∂–∏—Ç—å —Ç–µ–±–µ?`
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			reply_markup: {
				keyboard: [
					[messages.ADMINMENU, messages.REGULARMENU],
				],
				resize_keyboard: true,
			},
		})
	}

	checkIsAdmin(user) {
		return lodash.has(user, 'admin')
	}

	async massiveMessageHandler(ctx) {
		const user = await this.findUser(ctx.from)
		if (this.checkIsAdmin(user)) {
			await Mongodb.userBD.updateOne({id: user.id}, {
				$set: {
					current_action: {
						action: 'massive_message',
					},
				}
			})
			await ctx.telegram.sendMessage(ctx.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç, –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏!:)', {
				reply_markup: {
					keyboard: [
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		} else {
			const msg = '—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é!:)'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async answerMassiveMessageHandler(ctx, user) {
		const usersArr = await Mongodb.userBD.find().toArray();
		const massiveMessage = ctx.update.message.text;
		usersArr.forEach(async (user) => {
			return await ctx.telegram.sendMessage(user.id, massiveMessage);
		})

		await this.resetLastAction(user);
		const msg = '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å, –¥–∞–∂–µ —Ç–µ–±–µ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!'
		return this.showAdminMenu(ctx, msg);
	}

	async showAdminMenu(ctx, extraMsg) {
		const msg = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏';
		const sendMessage = extraMsg ? extraMsg : msg
		const user = await this.findUser(ctx.from)
		if (this.checkIsAdmin(user)) {
			await ctx.telegram.sendMessage(ctx.chat.id, sendMessage, {
				reply_markup: {
					keyboard: [
						[messages.MASSIVEMESSAGE],
						[messages.BACK]
					],
					resize_keyboard: true,
				},
			})
		} else {
			const msg = '—Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é!:)'
			return this.showRegularMenu(ctx, msg);
		}
	}

	async showRegularMenu(ctx, extraMsg) {
		const userName = await this.findUserName(ctx.from);
		const msg = "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?";
		const sendMessage = extraMsg ? `${userName}, ${extraMsg}` : `${userName}, ${msg}`
		await ctx.telegram.sendMessage(ctx.chat.id, sendMessage, {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})
	}

	async timeTableHandler(ctx) {
		const link = '<a href="https://juvenile-sailboat-95a.notion.site/f4f58fecffe4486c92649de506483d4b">—Å—Å—ã–ª–∫–µ</a>'
		await ctx.telegram.sendMessage(ctx.chat.id, '–°—É–ø–µ—Ä, –∑–∞ –Ω–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –ø–æ '+ link, {
			parse_mode:'HTML'
		})
	}

	async informationHandler(ctx) {
		const techNewsLink = '<a href="https://t.me/joinchat/TzL23fprszHePDo5">–ö–∞–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º X5 Tech News</a>'
		const communityLink = '<a href="https://t.me/joinchat/S87gOoavoRmhet1O">–ö–∞–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º X5 Tech Community</a>'
		const discordLink = '<a href="https://discord.gg/CpejhRKxc2">Discord-—Å–µ—Ä–≤–µ—Ä–∞</a>'
		const Olya = '<a href="https://t.me/opastuk">–û–ª—è –ü–∞—Å—Ç—É—Ö–æ–≤–∞</a>'
		const Nikita = '<a href="https://t.me/NickPanormov">–ù–∏–∫–∏—Ç–∞ –ü–∞–Ω–æ—Ä–º–æ–≤</a>'
		const Tolya = '<a href="https://t.me/ababin71517">–¢–æ–ª—è –ë–∞–±–∏–Ω</a>'
		const message = "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –°–µ–π—á–∞—Å –Ω–∞—à–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: \n\n" + techNewsLink + ", –∫—É–¥–∞ –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞.\n\n" +
			communityLink + ", –∫—É–¥–∞ –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤—Å—è–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏. –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏–ª —Å–ª–æ–∂–Ω—É—é —Ä–∞–±–æ—á—É—é –∑–∞–¥–∞—á—É, –ø—Ä–∏–¥—É–º–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ –∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–µ, —Ç–æ —Ç–µ–±–µ —Å—é–¥–∞!\n\n" +
			discordLink + ", –≥–¥–µ –º—ã –∏–Ω–æ–≥–¥–∞ –æ–±—â–∞–µ–º—Å—è\n\n" + '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è ' + Olya + ', –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –µ–π –Ω–∞–ø—Ä—è–º—É—é, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ë–æ–ª—å—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º—å—é–Ω–∏—Ç–∏ —Ç–∞–∫ –∂–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç ' + Nikita + ', –∏ '+ Tolya +', –æ–Ω–∏ –≤–µ–¥—É—Ç —Å–≤–æ–∏ —Ä—É–±—Ä–∏–∫–∏ –∏ –¥–µ–ª–∞—é—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∫—Ä—É—Ç–æ–≥–æ –¥–ª—è –Ω–∞—Å.' +
			'\n\n–ù–æ —Å–µ—Ä–¥—Ü–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ - —ç—Ç–æ —Ç—ã! –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å - –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã. –î–∞–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏, —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —É—á–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! –ó–¥–µ—Å—å –≤—Å–µ—Ö –ª—é–±—è—Ç ‚ù§Ô∏è'

		await ctx.telegram.sendMessage(ctx.chat.id, message, {
			parse_mode:'HTML'
		})
	}

	async askQuestionHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const userName = await this.findUserName(ctx.from);
		const msg = userName ? `${userName}, —Å–ª—É—à–∞—é —Ç–µ–±—è! \n–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!`: '–°–ª—É—à–∞—é —Ç–µ–±—è!\n –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!';
		await Mongodb.userBD.updateOne({id: user.id}, {
			$set: {
				current_action: {
					action: 'ask_question',
				},
			}
		})
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async speechHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const userName = await this.findUserName(ctx.from);
		const msg = userName ? `${userName}, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –í —Ä–∞–º–∫–∞—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∫–∞–∫ –∏ –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã (15-40 –º–∏–Ω—É—Ç), —Ç–∞–∫ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ X5 FoodTech. –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–∞—Ç—É!`:
			'–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –í —Ä–∞–º–∫–∞—Ö –∫–æ–º—å—é–Ω–∏—Ç–∏ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∫–∞–∫ –∏ –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã (15-40 –º–∏–Ω—É—Ç), —Ç–∞–∫ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ X5 FoodTech. –û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–∞—Ç—É!';
		await Mongodb.userBD.updateOne({id: user.id}, {
			$set: {
				current_action: {
					action: 'want_to_speak',
				},
			}
		})
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async giveIdeaHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const userName = await this.findUserName(ctx.from);
		const msg = userName ? `${userName}, –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ú—ã –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –û–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–Ω–µ –≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ`:
			'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ú—ã –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –û–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–Ω–µ –≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ';
		await Mongodb.userBD.updateOne({id: user.id}, {
			$set: {
				current_action: {
					action: 'give_idea',
				},
			}
		})
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},

		})
	}

	async suggestExternalPostHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const msg = "–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å—Å—ã–ª–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å, –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –∏—Ö –ø—Ä–∏–Ω—è—Ç—å ‚òπÔ∏è"
		await Mongodb.userBD.updateOne({id: user.id}, {
			$set: {
				current_action: {
					action: 'suggest_external_post',
				},
			}
		})
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}

	async suggestPrivatePostHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const msg = "–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å—Å—ã–ª–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å, –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –∏—Ö –ø—Ä–∏–Ω—è—Ç—å ‚òπÔ∏è"
		await Mongodb.userBD.updateOne({id: user.id}, {
			$set: {
				current_action: {
					action: 'suggest_private_post',
				},
			}
		})
		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}


	async suggestNewsHandler(ctx) {
		const userName = await this.findUserName(ctx.from);
		const msg = userName ? `${userName}, –æ—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å?`:
			'–æ—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å?';

		await ctx.telegram.sendMessage(ctx.chat.id, msg, {
			parse_mode: 'HTML',
			reply_markup: {
				keyboard: [
					[messages.EXTERNALCHANNEL, messages.PRIVATECHANNEL],
					[messages.BACK]
				],
				resize_keyboard: true,
			},
		})
	}

	async simpleMessageHandler(ctx) {
		const user = await this.findUser(ctx.from);
		const userName = await this.findUserName(ctx.from);

		if (lodash.has(user, 'current_action')) {
				switch (user.current_action.action) {
					case action.ASKQUESTION:
						return this.answerQuestionHandler(ctx, user);
						break;
					case action.GIVEIDEA:
						return this.answerIdeaHandler(ctx, user);
						break;
					case action.IWANTTOSPEAK:
						return this.answerSpeechHandler(ctx, user);
						break;
					case action.SUGGESTEXTERNALPOST:
						return this.answerSuggestExternalPostHandler(ctx, user);
						break;

					case action.SUGGESTPRIVATEPOST:
						return this.answerSuggestPrivatePostHandler(ctx, user);
						break;
					case action.MASSIVEMESSAGE:
						return this.answerMassiveMessageHandler(ctx, user);
				}
		} else {
			return await this.sendSimpleMessage(ctx, userName);
		}
	}

	async photoMessageHandler(ctx) {
		const photoPath = await this.getPhotoPath(ctx);
		console.log(photoPath)
	}

	async getPhotoPath(ctx) {
		let photoUrl = null;
		const url = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getFile?file_id=${ctx.message.photo[ctx.message.photo.length - 1].file_id}`;
		return new Promise((resolve) => {
			 request(url, (err, response, body)=> {
				if (err) return photoUrl(photoUrl);
				const bodyObject = JSON.parse(body);
				photoUrl = bodyObject.result.file_path;
				return resolve(photoUrl);
			})
		})
	}

	async answerSuggestExternalPostHandler(ctx, user) {
		const receivedExternalPost = ctx.update.message.text;
		const insertExternalPost = {
			post: receivedExternalPost,
			user_id: user.id,
			type: 'external',
			date: new Date().toISOString(),
		}
		await Mongodb.postDB.insertOne(insertExternalPost)

		await this.resetLastAction(user)

		return await ctx.telegram.sendMessage(ctx.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})
	}

	async answerSuggestPrivatePostHandler(ctx, user) {
		const receivedPrivatePost = ctx.update.message.text;
		const insertPrivatePost = {
			post: receivedPrivatePost,
			user_id: user.id,
			type: 'private',
			date: new Date().toISOString(),
		}

		await Mongodb.postDB.insertOne(insertPrivatePost)

		await this.resetLastAction(user)

		return await ctx.telegram.sendMessage(ctx.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
		})
	}

	async answerSpeechHandler(ctx, user) {
		const receivedSpeech = ctx.update.message.text;
		const insertSpeech = {
			speech: receivedSpeech,
			user_id: user.id,
			date: new Date().toISOString(),
		}
		await Mongodb.speechDB.insertOne(insertSpeech)

		await this.resetLastAction(user)

		const theNote = '<a href="https://www.notion.so/foodtech-x5/8098da36c0474833ad5018c879b754b9">–ø–∞–º—è—Ç–∫—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ—Ä–∫—à–æ–ø–æ–≤</a>'

		return await ctx.telegram.sendMessage(ctx.chat.id, `–ü—Ä–∏–Ω—è—Ç–æ! –î–µ—Ä–∂–∏ –Ω–∞—à—É ${theNote} üòÄ`, {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},
			parse_mode:'HTML'
		})
	}

	async sendSimpleMessage(ctx, userName) {
		const unidentifiedMessage = userName ? `–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å ${userName} üò≠ `: '–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å üò≠';
		await ctx.telegram.sendMessage(ctx.chat.id, unidentifiedMessage)
	}

	async answerQuestionHandler(ctx, user) {
		const askedQuestion = ctx.update.message.text;
		const insertQuestion = {
			question: askedQuestion,
			user_id: user.id,
			date: new Date().toISOString(),
		}
		await Mongodb.questionsBD.insertOne(insertQuestion)

		await this.resetLastAction(user)

		return await ctx.telegram.sendMessage(ctx.chat.id, '–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üí™',{
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},

		})
	}

	async answerIdeaHandler(ctx, user) {
		const receivedIdea = ctx.update.message.text;
		const insertIdea = {
			idea: receivedIdea,
			user_id: user.id,
			date: new Date().toISOString(),
		}
		await Mongodb.ideasBD.insertOne(insertIdea)

		await this.resetLastAction(user)

		return await ctx.telegram.sendMessage(ctx.chat.id, '–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–µ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ –∏–¥–µ–∏ –∏ –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!üí™', {
			reply_markup: {
				keyboard: [
					[messages.SUGGESTNEWS, messages.IWANTTOSPEAK],
					[messages.TIMETABLE, messages.INFORMATION],
					[messages.GIVEIDEA,messages.ASKQUESTION],
				],
				resize_keyboard: true,
			},

		})
	}

	async resetLastAction(user) {
		await Mongodb.userBD.updateOne({id: user.id}, {
			$unset:{
				current_action: ''
			}
		});
	}
}

const msgHandler = new MessagesHandler();
module.exports = msgHandler;
